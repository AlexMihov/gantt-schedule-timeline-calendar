const t="chart-timeline-grid-row-cell",e="chart-timeline-items-row-item";let i,s,n,a,o,c,l,h;function r(t,e){const s=i(t,e);c.isSelecting?(h.style.display="block",h.style.left=c.selectionArea.x+"px",h.style.top=c.selectionArea.y+"px",h.style.width=c.selectionArea.width+"px",h.style.height=c.selectionArea.height+"px"):h.style.display="none";const n=o`
    <div class=${l} style=${h}></div>
  `;return o`
    ${s}${n}
  `}const d="config.plugin.Selection";function p(){return{enabled:!0,isSelecting:!1,pointerState:"up",targetType:"",initialPosition:{x:0,y:0},currentPosition:{x:0,y:0},selectionArea:{x:0,y:0,width:0,height:0},selecting:{[e]:[],[t]:[]},selected:{[e]:[],[t]:[]},events:{down:null,move:null,up:null}}}class u{constructor(t,e){this.unsub=[],this.vido=t,this.state=t.state,this.api=t.api,this.options=e,this.data=p(),this.unsub.push(this.state.subscribe("config.plugin.TimelinePointer",t=>{this.poitnerData=t,this.onPointerData()})),this.updateData(),this.unsub.push(this.state.subscribe(d,t=>{this.data=t}))}destroy(){this.unsub.forEach(t=>t())}updateData(){this.state.update(d,Object.assign({},this.data))}getItemsUnderSelectionArea(){return[]}getSelectionArea(){const t={x:0,y:0,width:0,height:0},e=Object.assign({},this.poitnerData.initialPosition),i=Object.assign({},this.poitnerData.currentPosition),s=i.x-e.x,n=i.y-e.y;return s>=0?(t.x=e.x,t.width=s):(t.x=i.x,t.width=Math.abs(s)),n>=0?(t.y=e.y,t.height=n):(t.y=i.y,t.height=Math.abs(n)),t}collectLinkedItems(t,e=[]){if(t.linkedWith&&t.linkedWith.length){const i=this.state.get("config.chart.items");for(const s of t.linkedWith){const t=i[s];e.push(t),this.collectLinkedItems(t,e)}}return e}getSelected(t){let i;return i=this.data.selected[e].find(e=>e.id===t.id)?this.data.selected[e]:this.poitnerData.events.down.ctrlKey?[...new Set([...this.data.selected[e],...this.collectLinkedItems(t,[t])]).values()]:this.collectLinkedItems(t,[t]),i}selectCells(){this.data.isSelecting=!0,this.data.selectionArea=this.getSelectionArea(),0===this.getItemsUnderSelectionArea().length&&(this.state.update("config.chart.items.*.selected",!1),this.data.selected[e].length=0)}selectItems(){this.data.isSelecting=!1,this.data.selectionArea=this.getSelectionArea(),this.data.currentPosition=this.poitnerData.currentPosition,this.data.initialPosition=this.poitnerData.initialPosition;const t=this.poitnerData.targetData;this.data.selected[e]=this.getSelected(t);let i=this.state.multi();i=i.update("config.chart.items.*.selected",!1);for(const t of this.data.selected[e])i=i.update(`config.chart.items.${t.id}.selected`,!0);i.done()}onPointerData(){this.poitnerData.isMoving&&this.poitnerData.targetType===t?this.selectCells():this.poitnerData.isMoving&&this.poitnerData.targetType===e?this.selectItems():this.poitnerData.isMoving||(this.data.isSelecting=!1),this.data.events=this.poitnerData.events,this.data.pointerState=this.poitnerData.pointerState,this.data.targetType=this.poitnerData.targetType,this.updateData()}}function g(t={}){return t=function(t){const e={enabled:!0,grid:!1,items:!0,rows:!1,horizontal:!0,vertical:!0,selecting(){},deselecting(){},selected(){},deselected(){},canSelect:(t,e,i)=>e,canDeselect:(t,e,i)=>[]};return t=Object.assign(Object.assign({},e),t)}(t),function(e){const g=new u(e,t);return e.state.update(d,p()),e.state.update("config.wrappers.ChartTimelineItems",t=>function(t,e){return i=t,s=e,n=s.api,a=s.state,o=s.html,l=n.getClass("chart-selection"),h=new s.StyleMap({display:"none"}),s.onDestroy(a.subscribe("config.plugin.Selection",t=>{c=t,s.update()})),r}(t,e)),function(){g.destroy()}}}export{g as Plugin};
