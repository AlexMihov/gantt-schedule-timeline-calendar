{"version":3,"file":"Selection.plugin.min.js","sources":["../src/plugins/Selection.plugin.ts"],"sourcesContent":["/**\n * Selection plugin\n *\n * @copyright Rafal Pospiech <https://neuronet.io>\n * @author    Rafal Pospiech <neuronet.io@gmail.com>\n * @package   gantt-schedule-timeline-calendar\n * @license   GPL-3.0 (https://github.com/neuronetio/gantt-schedule-timeline-calendar/blob/master/LICENSE)\n * @link      https://github.com/neuronetio/gantt-schedule-timeline-calendar\n */\n\nexport interface RectStyle {\n  [key: string]: any;\n}\n\nexport interface Options {\n  grid?: boolean;\n  items?: boolean;\n  rows?: boolean;\n  horizontal?: boolean;\n  vertical?: boolean;\n  rectStyle?: RectStyle;\n  selecting?: (data, type: string) => void;\n  deselecting?: (data, type: string) => void;\n  selected?: (data, type) => void;\n  deselected?: (data, type) => void;\n  canSelect?: (type, state) => any[];\n}\n\nexport interface Items {\n  [key: string]: string[];\n}\n\ninterface SelectingData {\n  fromX?: number;\n  fromY?: number;\n  toX?: number;\n  toY?: number;\n  startX?: number;\n  startY?: number;\n  startCell?: any;\n  selecting?: boolean;\n  selected?: Items;\n}\n\nexport interface SelectState {\n  selecting?: Items;\n  selected?: Items;\n}\n\nexport default function Selection(options: Options = {}) {\n  let vido, state, api, schedule;\n  const defaultOptions: Options = {\n    grid: false,\n    items: true,\n    rows: false,\n    horizontal: true,\n    vertical: true,\n    rectStyle: {},\n    selecting() {},\n    deselecting() {},\n    selected() {},\n    deselected() {},\n    canSelect(type, currently) {\n      return currently;\n    }\n  };\n  options = { ...defaultOptions, ...options } as Options;\n  let selecting: SelectingData = {\n    fromX: -1,\n    fromY: -1,\n    toX: -1,\n    toY: -1,\n    startX: -1,\n    startY: -1,\n    startCell: false,\n    selecting: false\n  };\n  const selectionTypesIdGetters = {\n    'chart-timeline-grid-row': props => props.row.id,\n    'chart-timeline-grid-row-block': props => props.id,\n    'chart-timeline-items-row': props => props.row.id,\n    'chart-timeline-items-row-item': props => props.item.id\n  };\n  const path = 'config.plugin.selection';\n  const rectClassName = 'gantt-schedule-timeline-caledar__plugin-selection-rect';\n  const rect = document.createElement('div');\n  rect.classList.add(rectClassName);\n  rect.style.visibility = 'hidden';\n  rect.style.left = '0px';\n  rect.style.top = '0px';\n  rect.style.width = '0px';\n  rect.style.height = '0px';\n  rect.style.background = 'rgba(0, 119, 192, 0.2)';\n  rect.style.border = '2px dashed rgba(0, 119, 192, 0.75)';\n  rect.style.position = 'absolute';\n  rect.style['user-select'] = 'none';\n  rect.style['pointer-events'] = 'none';\n  for (const styleProp in options.rectStyle) {\n    rect.style[styleProp] = options.rectStyle[styleProp];\n  }\n\n  /**\n   * Selection action\n   * @param {Element} element\n   * @param {object|any} data\n   * @returns {object} with update and destroy\n   */\n  class SelectionAction {\n    chartTimeline: Element;\n    mouseDown: (ev: MouseEvent) => void;\n    mouseMove: (ev: MouseEvent) => void;\n    mouseUp: (ev: MouseEvent) => void;\n    left: number;\n    top: number;\n\n    constructor(element, data) {\n      let previousSelect;\n      this.chartTimeline = state.get('_internal.elements.chart-timeline');\n      if (!this.chartTimeline.querySelector('.' + rectClassName)) {\n        this.chartTimeline.insertAdjacentElement('beforeend', rect);\n        const bounding = this.chartTimeline.getBoundingClientRect();\n        this.left = bounding.left;\n        this.top = bounding.top;\n      }\n\n      /**\n       * Clear selection\n       */\n      function clearSelection() {\n        state.update(path, {\n          selecting: {\n            'chart-timeline-grid-rows': [],\n            'chart-timeline-grid-row-blocks': [],\n            'chart-timeline-items-rows': [],\n            'chart-timeline-items-row-items': []\n          },\n          selected: {\n            'chart-timeline-grid-rows': [],\n            'chart-timeline-grid-row-blocks': [],\n            'chart-timeline-items-rows': [],\n            'chart-timeline-items-row-items': []\n          }\n        });\n        state.update('_internal.chart.grid.rowsWithBlocks', function clearRowsWithBlocks(rowsWithBlocks) {\n          for (const row of rowsWithBlocks) {\n            for (const block of row.blocks) {\n              block.selected = false;\n              block.selecting = false;\n            }\n          }\n          return rowsWithBlocks;\n        });\n      }\n\n      /**\n       * Clone current selection state\n       * @param {object} currentSelect\n       * @returns {object} currentSelect cloned\n       */\n      function cloneSelection(currentSelect) {\n        const result: SelectingData = {};\n        result.selecting = { ...currentSelect.selecting };\n        result.selecting['chart-timeline-grid-rows'] = currentSelect.selecting['chart-timeline-grid-rows'].slice();\n        result.selecting['chart-timeline-grid-row-blocks'] = currentSelect.selecting[\n          'chart-timeline-grid-row-blocks'\n        ].slice();\n        result.selecting['chart-timeline-items-rows'] = currentSelect.selecting['chart-timeline-items-rows'].slice();\n        result.selecting['chart-timeline-items-row-items'] = currentSelect.selecting[\n          'chart-timeline-items-row-items'\n        ].slice();\n        result.selected = { ...currentSelect.selected };\n        result.selected['chart-timeline-grid-rows'] = currentSelect.selected['chart-timeline-grid-rows'].slice();\n        result.selected['chart-timeline-grid-row-blocks'] = currentSelect.selected[\n          'chart-timeline-grid-row-blocks'\n        ].slice();\n        result.selected['chart-timeline-items-rows'] = currentSelect.selected['chart-timeline-items-rows'].slice();\n        result.selected['chart-timeline-items-row-items'] = currentSelect.selected[\n          'chart-timeline-items-row-items'\n        ].slice();\n        return result;\n      }\n\n      /**\n       * Save and swap coordinates if needed\n       * @param {MouseEvent} ev\n       */\n      const saveAndSwapIfNeeded = (ev: MouseEvent) => {\n        const currentX = ev.x - this.left;\n        const currentY = ev.y - this.top;\n        if (currentX <= selecting.startX) {\n          selecting.fromX = currentX;\n          selecting.toX = selecting.startX;\n        } else {\n          selecting.fromX = selecting.startX;\n          selecting.toX = currentX;\n        }\n        if (currentY <= selecting.startY) {\n          selecting.fromY = currentY;\n          selecting.toY = selecting.startY;\n        } else {\n          selecting.fromY = selecting.startY;\n          selecting.toY = currentY;\n        }\n      };\n\n      /**\n       * Is rectangle inside other rectangle ?\n       * @param {DOMRect} boundingRect\n       * @param {DOMRect} rectBoundingRect\n       * @returns {boolean}\n       */\n      const isInside = (boundingRect: DOMRect, rectBoundingRect: DOMRect) => {\n        let horizontal = false;\n        let vertical = false;\n        if (\n          (boundingRect.left > rectBoundingRect.left && boundingRect.left < rectBoundingRect.right) ||\n          (boundingRect.right > rectBoundingRect.left && boundingRect.right < rectBoundingRect.right) ||\n          (boundingRect.left <= rectBoundingRect.left && boundingRect.right >= rectBoundingRect.right)\n        ) {\n          horizontal = true;\n        }\n        if (\n          (boundingRect.top > rectBoundingRect.top && boundingRect.top < rectBoundingRect.bottom) ||\n          (boundingRect.bottom > rectBoundingRect.top && boundingRect.bottom < rectBoundingRect.bottom) ||\n          (boundingRect.top <= rectBoundingRect.top && boundingRect.bottom >= rectBoundingRect.bottom)\n        ) {\n          vertical = true;\n        }\n        return horizontal && vertical;\n      };\n\n      /**\n       * Get selecting elements\n       * @param {DOMRect} rectBoundingRect\n       * @param {Element[]} elements\n       * @param {string} type\n       * @returns {string[]}\n       */\n      const getSelecting = (rectBoundingRect: DOMRect, elements: Element[], type: string, getId: (any) => string) => {\n        const selectingResult = [];\n        const currentlySelectingData = [];\n        const all = elements[type + 's'];\n        const currentSelecting = state.get(`${path}.selecting.${type}s`);\n        for (const element of all) {\n          const boundingRect = element.getBoundingClientRect();\n          if (isInside(boundingRect, rectBoundingRect)) {\n            currentlySelectingData.push(element.vido);\n            const canSelect = options.canSelect(type, currentlySelectingData);\n            if (canSelect.includes(element.vido)) {\n              if (!currentSelecting.includes(getId(element.vido))) {\n                options.selecting(element.vido, type);\n              }\n              selectingResult.push(getId(element.vido));\n            } else {\n              currentlySelectingData.unshift();\n            }\n          } else {\n            if (currentSelecting.includes(getId(element.vido))) {\n              options.deselecting(element.vido, type);\n            }\n          }\n        }\n        return selectingResult;\n      };\n\n      /**\n       * Select\n       * @param {Event} ev\n       */\n      const select = ev => {\n        if (!selecting.selecting) {\n          return;\n        }\n        saveAndSwapIfNeeded(ev);\n        rect.style.left = selecting.fromX + 'px';\n        rect.style.top = selecting.fromY + 'px';\n        rect.style.visibility = 'visible';\n        rect.style.width = selecting.toX - selecting.fromX + 'px';\n        rect.style.height = selecting.toY - selecting.fromY + 'px';\n        const rectBoundingRect = rect.getBoundingClientRect();\n        const elements = state.get('_internal.elements');\n        const nowSelecting = {};\n        for (const type in selectionTypesIdGetters) {\n          nowSelecting[type + 's'] = getSelecting(rectBoundingRect, elements, type, selectionTypesIdGetters[type]);\n        }\n        state.update(`${path}.selecting`, nowSelecting);\n        state.update(\n          'config.chart.items',\n          function updateItems(items) {\n            const now = nowSelecting['chart-timeline-items-row-items'];\n            for (const itemId in items) {\n              const item = items[itemId];\n              if (now.includes(item.id)) {\n                item.selecting = true;\n              } else {\n                item.selecting = false;\n              }\n            }\n            return items;\n          },\n          { only: ['selecting'] }\n        );\n        state.update('_internal.chart.grid.rowsWithBlocks', function updateRowsWithBlocks(rowsWithBlocks) {\n          const nowBlocks = nowSelecting['chart-timeline-grid-row-blocks'];\n          const nowRows = nowSelecting['chart-timeline-grid-rows'];\n          for (const row of rowsWithBlocks) {\n            if (nowRows.includes(row.id)) {\n              row.selecting = true;\n            } else {\n              row.selecting = false;\n            }\n            for (const block of row.blocks) {\n              if (nowBlocks.includes(block.id)) {\n                block.selecting = true;\n              } else {\n                block.selecting = false;\n              }\n            }\n          }\n          return rowsWithBlocks;\n        });\n      };\n\n      /**\n       * End select\n       * @param {Event} ev\n       */\n      const endSelect = ev => {\n        if (selecting.selecting) {\n          ev.stopPropagation();\n        } else {\n          clearSelection();\n          return;\n        }\n        selecting.selecting = false;\n        rect.style.visibility = 'hidden';\n        const currentSelect = state.get(path);\n        const select: SelectState = {};\n        state.update(path, value => {\n          select.selected = { ...value.selecting };\n          select.selecting = {\n            'chart-timeline-grid-rows': [],\n            'chart-timeline-grid-row-blocks': [],\n            'chart-timeline-items-rows': [],\n            'chart-timeline-items-row-items': []\n          } as Items;\n          return select;\n        });\n        const elements = state.get('_internal.elements');\n        for (const type in selectionTypesIdGetters) {\n          for (const element of elements[type + 's']) {\n            if (currentSelect.selecting[type + 's'].includes(element.vido.id)) {\n              options.deselecting(element.vido, type);\n            }\n          }\n        }\n        state.update('config.chart.items', function updateItems(items) {\n          const now = currentSelect.selecting['chart-timeline-items-row-items'];\n          for (const itemId in items) {\n            const item = items[itemId];\n            if (now.includes(item.id)) {\n              item.selecting = true;\n            } else {\n              item.selecting = false;\n            }\n          }\n          return items;\n        });\n        state.update('_internal.chart.grid.rowsWithBlocks', function updateRowsWithBlocks(rowsWithBlocks) {\n          for (const row of rowsWithBlocks) {\n            for (const block of row.blocks) {\n              if (currentSelect.selecting['chart-timeline-grid-row-blocks'].includes(block.id)) {\n                if (typeof block.selected === 'undefined' || !block.selected) {\n                  options.selected(block, 'chart-timeline-grid-row-block');\n                }\n                block.selected = true;\n              } else {\n                if (previousSelect.selected['chart-timeline-grid-row-blocks'].includes(block.id)) {\n                  options.deselected(block, 'chart-timeline-grid-row-block');\n                }\n                block.selected = false;\n              }\n            }\n          }\n          return rowsWithBlocks;\n        });\n      };\n\n      /**\n       * Mouse down event handler\n       * @param {MouseEvent} ev\n       */\n      this.mouseDown = ev => {\n        if (ev.button !== 0) {\n          return;\n        }\n        selecting.selecting = true;\n        selecting.fromX = ev.x - this.left;\n        selecting.fromY = ev.y - this.top;\n        selecting.startX = selecting.fromX;\n        selecting.startY = selecting.fromY;\n        previousSelect = cloneSelection(state.get(path));\n        clearSelection();\n      };\n\n      /**\n       * Mouse move event handler\n       * @param {MouseEvent} ev\n       */\n      this.mouseMove = ev => {\n        select(ev);\n      };\n\n      /**\n       * Mouse up event handler\n       * @param {MouseEvent} ev\n       */\n      this.mouseUp = ev => {\n        endSelect(ev);\n      };\n\n      element.addEventListener('mousedown', this.mouseDown);\n      document.addEventListener('mousemove', schedule(this.mouseMove));\n      document.body.addEventListener('mouseup', this.mouseUp);\n    }\n    update() {\n      const bounding = this.chartTimeline.getBoundingClientRect();\n      this.left = bounding.left;\n      this.top = bounding.top;\n    }\n    destroy(element) {\n      document.body.removeEventListener('mouseup', this.mouseUp);\n      document.removeEventListener('mousemove', this.mouseMove);\n      element.removeEventListener('mousedown', this.mouseDown);\n    }\n  }\n\n  /**\n   * Update selection\n   * @param {any} data\n   * @param {Element} element\n   * @param {string[]} selecting\n   * @param {string[]} selected\n   * @param {string} classNameSelecting\n   * @param {string} classNameSelected\n   */\n  function updateSelection(\n    element: Element,\n    selecting: string[],\n    selected: string[],\n    classNameSelecting: string,\n    classNameSelected: string\n  ) {\n    if (selecting && !element.classList.contains(classNameSelecting)) {\n      element.classList.add(classNameSelecting);\n    } else if (!selecting && element.classList.contains(classNameSelecting)) {\n      element.classList.remove(classNameSelecting);\n    }\n    if (selected && !element.classList.contains(classNameSelected)) {\n      element.classList.add(classNameSelected);\n    } else if (!selected && element.classList.contains(classNameSelected)) {\n      element.classList.remove(classNameSelected);\n    }\n  }\n\n  /**\n   * Grid row block action\n   * @param {Element} element\n   * @param {object} data\n   * @returns {object} with update and destroy functions\n   */\n  class GridBlockAction {\n    classNameSelecting: string;\n    classNameSelected: string;\n\n    constructor(element: Element, data: any) {\n      this.classNameSelecting = api.getClass('chart-timeline-grid-row-block') + '--selecting';\n      this.classNameSelected = api.getClass('chart-timeline-grid-row-block') + '--selected';\n      updateSelection(element, data.selecting, data.selected, this.classNameSelecting, this.classNameSelected);\n    }\n\n    update(element: Element, data: any) {\n      updateSelection(element, data.selecting, data.selected, this.classNameSelecting, this.classNameSelected);\n    }\n\n    destroy(element: Element, changedData: any) {\n      element.classList.remove(this.classNameSelecting);\n      element.classList.remove(this.classNameSelected);\n    }\n  }\n\n  /**\n   * Item action\n   * @param {Element} element\n   * @param {object} data\n   * @returns {object} with update and destroy functions\n   */\n  class ItemAction {\n    classNameSelecting: string;\n    classNameSelected: string;\n\n    constructor(element: Element, data: any) {\n      this.classNameSelecting = api.getClass('chart-timeline-items-row-item') + '--selecting';\n      this.classNameSelected = api.getClass('chart-timeline-items-row-item') + '--selected';\n      updateSelection(\n        element,\n        data.item.selecting,\n        data.item.selected,\n        this.classNameSelecting,\n        this.classNameSelected\n      );\n    }\n\n    update(element: Element, data: any) {\n      updateSelection(\n        element,\n        data.item.selecting,\n        data.item.selected,\n        this.classNameSelecting,\n        this.classNameSelected\n      );\n    }\n\n    destroy(element: Element, data: any) {\n      element.classList.remove(this.classNameSelecting);\n      element.classList.remove(this.classNameSelected);\n    }\n  }\n\n  /**\n   * On block create handler\n   * @param {object} block\n   * @returns {object} block\n   */\n  function onBlockCreate(block) {\n    const selectedBlocks = state.get('config.plugin.selection.selected.chart-timeline-grid-row-blocks');\n    for (const selectedBlock of selectedBlocks) {\n      if (selectedBlock === block.id) {\n        block.selected = true;\n        return block;\n      }\n    }\n    block.selected = false;\n    return block;\n  }\n\n  return function initialize(mainVido) {\n    vido = mainVido;\n    state = vido.state;\n    api = vido.api;\n    schedule = vido.schedule;\n    if (typeof state.get(path) === 'undefined') {\n      state.update(path, {\n        selecting: {\n          'chart-timeline-grid-rows': [],\n          'chart-timeline-grid-row-blocks': [],\n          'chart-timeline-items-rows': [],\n          'chart-timeline-items-row-items': []\n        },\n        selected: {\n          'chart-timeline-grid-rows': [],\n          'chart-timeline-grid-row-blocks': [],\n          'chart-timeline-items-rows': [],\n          'chart-timeline-items-row-items': []\n        }\n      });\n    }\n    state.update('config.chart.items', items => {\n      for (const itemId in items) {\n        const item = items[itemId];\n        if (typeof item.selecting === 'undefined') {\n          item.selecting = false;\n        }\n        if (typeof item.selected === 'undefined') {\n          item.selected = false;\n        }\n      }\n      return items;\n    });\n    state.update('config.actions.chart-timeline', actions => {\n      actions.push(SelectionAction);\n      return actions;\n    });\n    state.update('config.actions.chart-timeline-grid-row-block', actions => {\n      actions.push(GridBlockAction);\n      return actions;\n    });\n    state.update('config.actions.chart-timeline-items-row-item', actions => {\n      actions.push(ItemAction);\n      return actions;\n    });\n    state.update('config.chart.grid.block.onCreate', onCreate => {\n      onCreate.push(onBlockCreate);\n      return onCreate;\n    });\n  };\n}\n"],"names":["Selection","options","vido","state","api","schedule","defaultOptions","grid","items","rows","horizontal","vertical","rectStyle","[object Object]","canSelect","type","currently","Object","selecting","fromX","fromY","toX","toY","startX","startY","startCell","selectionTypesIdGetters","chart-timeline-grid-row","props","row","id","chart-timeline-grid-row-block","chart-timeline-items-row","chart-timeline-items-row-item","item","path","rectClassName","rect","document","createElement","classList","add","style","visibility","left","top","width","height","background","border","position","styleProp","SelectionAction","element","data","previousSelect","this","chartTimeline","get","querySelector","insertAdjacentElement","bounding","getBoundingClientRect","clearSelection","update","chart-timeline-grid-rows","chart-timeline-grid-row-blocks","chart-timeline-items-rows","chart-timeline-items-row-items","selected","clearRowsWithBlocks","rowsWithBlocks","block","blocks","saveAndSwapIfNeeded","ev","currentX","x","currentY","y","isInside","boundingRect","rectBoundingRect","right","bottom","getSelecting","elements","getId","selectingResult","currentlySelectingData","all","currentSelecting","push","includes","unshift","deselecting","mouseDown","button","cloneSelection","currentSelect","result","slice","mouseMove","nowSelecting","updateItems","now","itemId","only","updateRowsWithBlocks","nowBlocks","nowRows","select","mouseUp","stopPropagation","value","deselected","endSelect","addEventListener","body","removeEventListener","updateSelection","classNameSelecting","classNameSelected","contains","remove","GridBlockAction","getClass","changedData","ItemAction","onBlockCreate","selectedBlocks","selectedBlock","initialize","mainVido","actions","onCreate"],"mappings":"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"}