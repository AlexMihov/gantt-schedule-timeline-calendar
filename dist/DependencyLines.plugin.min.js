!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self).DependencyLines=t()}(this,(function(){"use strict";
/**
   * DependencyLines plugin
   *
   * @copyright Rafal Pospiech <https://neuronet.io>
   * @author    Rafal Pospiech <neuronet.io@gmail.com>
   * @package   gantt-schedule-timeline-calendar
   * @license   GPL-3.0 (https://github.com/neuronetio/gantt-schedule-timeline-calendar/blob/master/LICENSE)
   * @link      https://github.com/neuronetio/gantt-schedule-timeline-calendar
   */let e,t,n;const s=document.createElement("div");s.style.position="absolute",s.style.left="0",s.style.top="0",s.style.width="var(--width)",s.style.height="var(--height)";const i={type:"quadratic",handle:{style:{},width:40,height:40},connector:{style:{},width:40,height:40}};function DependencyLinesLines(e){const{html:t,onDestroy:n,api:s,state:i,reuseComponents:o}=e;let c;n(i.subscribe("config.classNames",()=>{c=s.getClass("chart-timeline-dependency-lines-lines")}));let l=[];return n(i.subscribe("_internal.chart.visibleItems",e=>{const t=i.get("config.list.rows"),n={};for(const s in e){const i=e[s];"string"==typeof i.rowId&&t[i.rowId]&&(n[i.rowId]=t[i.rowId])}})),e=>t`
      <div class="${c}">${l.map(e=>e.html())}</div>
    `}let o=!1;function ItemDependencyLineHandle(t,n){const{html:s,onDestroy:i,api:c,state:l,StyleMap:a,onChange:r,Detach:d,update:p,Actions:h,PointerAction:m}=t,u="chart-timeline-dependency-lines-handle",y=Object.assign({},n);let f,g;i(l.subscribe("config.classNames",()=>{f=c.getClass(u),g=c.getClass("chart-timeline-dependency-lines-handle--connector")}));let w=!1;const b=new d(()=>{const e=l.get("config.plugin.ItemMovement.movement.moving");return w||!n.item.selected||e}),v=new d(()=>w||!o||o===n.item.id),x=new a({left:"0px",top:"0px",width:e.handle.width+"px",height:e.handle.height+"px"}),D=new a({left:"0px",top:"0px",width:e.connector.width+"px",height:e.connector.height+"px"});function updatePosition(){x.style.left=c.time.globalTimeToViewPixelOffset(n.item.time.end,!0)+"px",x.style.top=n.row.top+"px",D.style.left=c.time.globalTimeToViewPixelOffset(n.item.time.start,!0)-e.connector.width-1+"px",D.style.top=n.row.top+"px";for(const t in e.handle.style)x.style[t]=e.handle.style[t];for(const t in e.connector.style)D.style[t]=e.connector.style[t]}r((function change(e,t){if(t.leave)return w=!0,p();w=!1,n=e;for(const e in n)y[e]=n[e];updatePosition(),p()})),i(l.subscribeAll(["_internal.chart.time","config.scroll.compensation"],()=>{updatePosition(),p()}));const $=c.getActions(u);y.pointerOptions={axis:"xy",onDown({event:e}){e.stopPropagation(),e.preventDefault(),o=n.item.id,p()},onMove({event:e,movementX:t,movementY:n}){o&&(e.stopPropagation(),e.preventDefault(),p())},onUp({event:e}){o&&(e.stopPropagation(),e.preventDefault(),o=!1,p())}},$.push(m);const O=h.create($,y);return e=>s`
      <div detach=${b} class=${f} style=${x} data-actions=${O}></div>
      <div detach=${v} class=${g} style=${D}></div>
    `}function DependencyLinesHandles(e){const{html:t,onDestroy:n,api:s,state:i,reuseComponents:o}=e;let c;n(i.subscribe("config.classNames",()=>{c=s.getClass("chart-timeline-dependency-lines-handles")}));const l=[];return n(i.subscribe("_internal.chart.visibleItems",e=>{const t=[],n=i.get("config.list.rows");for(const s of e){const e=n[s.rowId];e&&t.push({item:s,row:e})}return o(l,t,e=>e,ItemDependencyLineHandle)})),e=>t`
      <div class="${c}">${l.map(e=>e.html())}</div>
    `}return function DependencyLinesPlugin(s=i){return function initialize(o){t=o.state,n=o.api,i.connector.width=i.connector.height=t.get("config.list.rowHeight")||40,e=Object.assign(Object.assign({},i),s),e.connector=Object.assign(Object.assign({},i.connector),e.connector),e.connector.style=Object.assign(Object.assign({},i.connector.style),e.connector.style),e.handle=Object.assign(Object.assign({},i.handle),e.handle),e.handle.style=Object.assign(Object.assign({},i.handle.style),e.handle.style);const c=o.createComponent(DependencyLinesLines);t.update("config.wrappers.ChartTimelineGrid",e=>(function DependencyLinesGridWrapper(t,n){const s=o.html`${t}${c.html()}`;return e(s,n)}));const l=o.createComponent(DependencyLinesHandles);return t.update("config.wrappers.ChartTimelineItems",e=>(function DependencyLinesItemsWrapper(t,n){const s=o.html`${t}${l.html()}`;return e(s,n)})),function destroy(){c.destroy(),l.destroy()}}}}));
//# sourceMappingURL=DependencyLines.plugin.min.js.map
