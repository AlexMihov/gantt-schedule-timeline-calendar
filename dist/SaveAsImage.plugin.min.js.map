{"version":3,"file":"SaveAsImage.plugin.min.js","sources":["../src/plugins/SaveAsImage.plugin.ts"],"sourcesContent":["/**\n * SaveAsImage plugin\n *\n * @copyright Rafal Pospiech <https://neuronet.io>\n * @author    Rafal Pospiech <neuronet.io@gmail.com>\n * @package   gantt-schedule-timeline-calendar\n * @license   GPL-3.0 (https://github.com/neuronetio/gantt-schedule-timeline-calendar/blob/master/LICENSE)\n * @link      https://github.com/neuronetio/gantt-schedule-timeline-calendar\n */\n\n// @ts-nocheck\nexport default function SaveAsImage(options = {}) {\n  const defaultOptions = {\n    style: 'font-family: sans-serif;',\n    filename: 'gantt-schedule-timeline-calendar.jpeg'\n  };\n  options = { ...defaultOptions, options };\n  function downloadImage(data, filename) {\n    const a = document.createElement('a');\n    a.href = data;\n    a.download = filename;\n    document.body.appendChild(a);\n    a.click();\n  }\n\n  function saveAsImage(ev) {\n    const element = ev.target;\n    const width = element.clientWidth;\n    const height = element.clientHeight;\n    const html = unescape(encodeURIComponent(element.outerHTML));\n    let style = '';\n    for (const styleSheet of document.styleSheets) {\n      if (styleSheet.title === 'gstc') {\n        for (const rule of styleSheet.rules) {\n          style += rule.cssText;\n        }\n      }\n    }\n    style = `<style>* {${options.style}} ${style}</style>`;\n    const svg = `<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"${width}\" height=\"${height}\" viewBox=\"0 0 ${width} ${height}\">\n      <foreignObject x=\"0\" y=\"0\" width=\"${width}\" height=\"${height}\">\n        <div xmlns=\"http://www.w3.org/1999/xhtml\">\n          ${style}\n          ${html}\n        </div>\n      </foreignObject>\n    </svg>`;\n    const canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n    const ctx = canvas.getContext('2d');\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, width, height);\n    const svg64 = 'data:image/svg+xml;base64,' + btoa(svg);\n    const img = new Image();\n    img.onload = function onLoad() {\n      ctx.drawImage(img, 0, 0);\n      const jpeg = canvas.toDataURL('image/jpeg', 1.0);\n      downloadImage(jpeg, options.filename);\n    };\n    img.src = svg64;\n  }\n\n  return function initialize(vido) {\n    vido.state.subscribe('_internal.elements.main', main => {\n      if (main) {\n        main.addEventListener('save-as-image', saveAsImage);\n      }\n    });\n  };\n}\n"],"names":["SaveAsImage","options","saveAsImage","ev","element","target","width","clientWidth","height","clientHeight","html","unescape","encodeURIComponent","outerHTML","style","styleSheet","document","styleSheets","title","rule","rules","cssText","svg","canvas","createElement","ctx","getContext","fillStyle","fillRect","svg64","btoa","img","Image","onload","onLoad","drawImage","downloadImage","data","filename","a","href","download","body","appendChild","click","toDataURL","src","initialize","vido","state","subscribe","main","addEventListener"],"mappings":";;;;;;;;;qBAWwBA,YAAYC,EAAU,IAc5C,SAASC,YAAYC,GACnB,MAAMC,EAAUD,EAAGE,OACbC,EAAQF,EAAQG,YAChBC,EAASJ,EAAQK,aACjBC,EAAOC,SAASC,mBAAmBR,EAAQS,YACjD,IAAIC,EAAQ,GACZ,IAAK,MAAMC,KAAcC,SAASC,YAChC,GAAyB,SAArBF,EAAWG,MACb,IAAK,MAAMC,KAAQJ,EAAWK,MAC5BN,GAASK,EAAKE,QAKpB,MAAMC,oDAAwDhB,cAAkBE,mBAAwBF,KAASE,gDAC3EF,cAAkBE,sEAFxDM,eAAqBb,EAAQa,UAAUA,0BAK/BJ,wDAIFa,EAASP,SAASQ,cAAc,UACtCD,EAAOjB,MAAQA,EACfiB,EAAOf,OAASA,EAChB,MAAMiB,EAAMF,EAAOG,WAAW,MAC9BD,EAAIE,UAAY,QAChBF,EAAIG,SAAS,EAAG,EAAGtB,EAAOE,GAC1B,MAAMqB,EAAQ,6BAA+BC,KAAKR,GAC5CS,EAAM,IAAIC,MAChBD,EAAIE,OAAS,SAASC,SACpBT,EAAIU,UAAUJ,EAAK,EAAG,GAvC1B,SAASK,cAAcC,EAAMC,GAC3B,MAAMC,EAAIvB,SAASQ,cAAc,KACjCe,EAAEC,KAAOH,EACTE,EAAEE,SAAWH,EACbtB,SAAS0B,KAAKC,YAAYJ,GAC1BA,EAAEK,QAoCAR,CADab,EAAOsB,UAAU,aAAc,GACxB5C,EAAQqC,WAE9BP,EAAIe,IAAMjB,EAGZ,OA/CA5B,iCAJuB,CACrBa,MAAO,2BACPwB,SAAU,2CAEmBrC,QAAAA,IA+CxB,SAAS8C,WAAWC,GACzBA,EAAKC,MAAMC,UAAU,0BAA2BC,IAC1CA,GACFA,EAAKC,iBAAiB,gBAAiBlD"}